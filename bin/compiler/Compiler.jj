/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Compiler.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Compiler)
package compiler;
import recovery.*;

public class Compiler implements/*@bgen(jjtree)*/ CompilerTreeConstants, /*@egen*/ CompilerTreeConstants
{/*@bgen(jjtree)*/
  protected static JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    new Compiler(System.in);
    System.out.println("------------------------");
    System.out.println("\") Compiler Language ");
    System.out.println("\tv0.0.1");
    System.out.println("------------------------\n");
    try {
		SimpleNode simpleNode = Compiler.Start();
		simpleNode.dump("-- >");
    } catch (Exception ex) {
		System.out.println("\nError!");
  	}
  }

  static public String im(int x)
  {
    int k;
    String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e) {}
   return s;
  }
}

PARSER_END(Compiler)

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (compiler())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void compiler():
{/*@bgen(jjtree) compiler */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) compiler */
  try {
/*@egen*/
  try {
	iniciocompiler()
    bloco()
    fimcompiler()
  } catch (ParseException e) {
    
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bloco() :
{/*@bgen(jjtree) bloco */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) bloco */
  try {
/*@egen*/
  try {
    (
      declaracaVariaveis()
//      | condicional()
//      | repeticaoPara()
//      | repeticaoEnquanto()
//      | chamadorDeIdNome()
//      | retorno()
    )*
  }
  catch (ParseException e) {
    consumeUntil(g, e, "bloco");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void id() :
{/*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) id */
    try {
/*@egen*/
    bool()
    | numero()
    | funcao()
    | texto()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void declaracaVariaveis():
{/*@bgen(jjtree) declaracaVariaveis */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAVARIAVEIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaracaVariaveis */
 try {
/*@egen*/
 id()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN :
{
  < SOMA       : "+"  >
| < SUBTRAI    : "-"  >
| < MULTIPLICA : "*"  >
| < DIVIDE     : "/"  >
| < POTENCIACAO   : "**" >
| < IGUALDADE  : "==" >
| < ATRIBUICAO : "="  >
| < MENOR      : "<"  >
| < MAIOR      : ">"  >
| < MENOR_IGUAL : "<=" >
| < MAIOR_IGUAL : ">=" >
| < ELOGICO	   : "&&" >
| < OULOGICO   : "||" >
}

TOKEN :
{
  < TIPO_NUMERO     : "number"   >
| < TIPO_TEXTO      : "string"  >
| < TIPO_BOOL       : "bool"  >
| < TIPO_FUNCAO     : "function"   >
}

TOKEN :
{
	< ABRE_PARENTESE  : "(" >
| 	< FECHA_PARENTESE : ")" >
| 	< ABRE_CHAVES     : "{" >
| 	< FECHA_CHAVES    : "}" >
|  	< PONTO_E_VIRGULA  : ";" >
|   < VIRGULA        : "," >
|   < PONTO			 : "." >
| 	< ABRE_COLCHETES  : "[" >
| 	< FECHA_COLCHETES : "]" >
}

TOKEN :
{
	< INICIO_COMPILER: "initialize">
| 	< FIM_COMPILER: "terminate">
}

void iniciocompiler () : {/*@bgen(jjtree) iniciocompiler */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIOCOMPILER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) iniciocompiler */
                            try {
/*@egen*/< INICIO_COMPILER >/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void fimcompiler () : {/*@bgen(jjtree) fimcompiler */
  SimpleNode jjtn000 = new SimpleNode(JJTFIMCOMPILER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) fimcompiler */
                         try {
/*@egen*/< FIM_COMPILER >/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/}
void numero () : {/*@bgen(jjtree) numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) numero */
                    try {
/*@egen*/< TIPO_NUMERO >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}
void texto () : {/*@bgen(jjtree) texto */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) texto */
                   try {
/*@egen*/< TIPO_TEXTO >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/}
void bool () : {/*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) bool */
                  try {
/*@egen*/< TIPO_BOOL >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/}
void funcao () : {/*@bgen(jjtree) funcao */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) funcao */
                    try {
/*@egen*/< TIPO_FUNCAO >/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                      }
                    }
/*@egen*/}